import 'package:beans_alert/src/helpers/SvgHelpers.dart';
import 'package:beans_alert/src/model/ContactModel.dart';
import 'package:beans_alert/src/services/SemaphoreService.dart';
import 'package:beans_alert/src/widget/CustomButton.dart';
import 'package:beans_alert/src/widget/CustomNavigationSideBar.dart';
import 'package:beans_alert/src/widget/CustomText.dart';
import 'package:beans_alert/src/widget/CustomTextField.dart';
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:flutter_svg/svg.dart';
import 'package:fluttertoast/fluttertoast.dart';
import 'package:font_awesome_flutter/font_awesome_flutter.dart';

import '../bloc/ContactBloc.dart';
import '../bloc/MessageHistoryBloc.dart';
import '../bloc/ScheduledMessageBloc.dart';
import '../helpers/ColorHelpers.dart';
import '../helpers/SessionHelpers.dart';
import '../model/MessageHistory.dart';
import '../model/ScheduledMessage.dart';
import '../services/GmailService.dart';
import '../widget/SelectableContactCard.dart';

class SendMessageView extends StatefulWidget {
  const SendMessageView({Key? key}) : super(key: key);

  @override
  State<SendMessageView> createState() => _SendMessageViewState();
}

class _SendMessageViewState extends State<SendMessageView> {
  final TextEditingController _senderNameController = TextEditingController();
  final TextEditingController _messageController = TextEditingController();
  final Set<ContactModel> _selectedContacts = {};
  bool _isLoading = false;
  bool _sendSMS = true;
  bool _sendEmail = true;

  @override
  void initState() {
    super.initState();
    context.read<ContactBloc>().add(LoadContactsEvent());
    // Remove hardcoded sender name - let it be empty so Semaphore uses default
    _senderNameController.text = '';
  }

  @override
  void dispose() {
    _senderNameController.dispose();
    _messageController.dispose();
    super.dispose();
  }

  void _toggleContactSelection(ContactModel contact) {
    setState(() {
      if (_selectedContacts.contains(contact)) {
        _selectedContacts.remove(contact);
        print('❌ Deselected: ${contact.name}');
      } else {
        _selectedContacts.add(contact);
        print('✅ Selected: ${contact.name} (${contact.phoneNumber})');
      }
      print('📊 Total selected: ${_selectedContacts.length}');
    });
  }

  void _sendMessage() async {
    print('🔄 Starting message send process...');
    print('👥 Selected contacts: ${_selectedContacts.length}');

    if (_selectedContacts.isEmpty) {
      print('❌ No contacts selected');
      Fluttertoast.showToast(msg: 'Please select at least one recipient');
      return;
    }

    if (_messageController.text.trim().isEmpty) {
      print('❌ No message entered');
      Fluttertoast.showToast(msg: 'Please enter a message');
      return;
    }

    setState(() => _isLoading = true);

    try {
      int smsSuccessCount = 0;
      int smsFailCount = 0;
      int emailSuccessCount = 0;
      int emailFailCount = 0;

      print('📤 Sending to ${_selectedContacts.length} contacts...');
      for (final contact in _selectedContacts) {
        print('📞 Sending to: ${contact.name} (${contact.phoneNumber}, ${contact.email})');

        // Send SMS if phone number exists and SMS is selected
        bool smsResult = false;
        if (_sendSMS && contact.phoneNumber.isNotEmpty) {
          smsResult = await SemaphoreService.sendSMS(
            contact.phoneNumber,
            _messageController.text.trim(),
            senderName: _senderNameController.text.trim().isNotEmpty
                ? _senderNameController.text.trim()
                : null,
          );
        }

        // Send Email if email exists and Email is selected
        bool emailResult = false;
        if (_sendEmail && contact.email.isNotEmpty) {
          emailResult = await GmailService.sendedToClient(
            [contact.email],
            'Message from ${_senderNameController.text.trim().isNotEmpty ? _senderNameController.text.trim() : 'Beans Alert'}',
            _messageController.text.trim(),
          );
        }

        // Determine service type
        String serviceType = 'None';
        if (smsResult && emailResult) {
          serviceType = 'Both';
        } else if (smsResult) {
          serviceType = 'SMS';
        } else if (emailResult) {
          serviceType = 'Email';
        }

        // Save message history regardless of success/failure
        final messageHistory = MessageHistory(
          id: '', // Will be generated by the bloc
          senderName: _senderNameController.text.trim().isNotEmpty
              ? _senderNameController.text.trim()
              : 'Default',
          message: _messageController.text.trim(),
          receiverName: contact.name,
          receiverPhone: contact.phoneNumber,
          serviceType: serviceType,
          timestamp: DateTime.now(),
          sentSuccessfully: smsResult || emailResult, // Success if either SMS or email succeeded
        );

        context.read<MessageHistoryBloc>().add(
          AddMessageHistoryEvent(messageHistory: messageHistory),
        );

        if (smsResult) smsSuccessCount++;
        if (!smsResult && _sendSMS && contact.phoneNumber.isNotEmpty) smsFailCount++;
        if (emailResult) emailSuccessCount++;
        if (!emailResult && _sendEmail && contact.email.isNotEmpty) emailFailCount++;
      }

      if (smsSuccessCount > 0 || emailSuccessCount > 0) {
        String successMsg = '';
        if (smsSuccessCount > 0) successMsg += 'SMS: $smsSuccessCount ';
        if (emailSuccessCount > 0) successMsg += 'Email: $emailSuccessCount ';
        successMsg += 'recipient${(smsSuccessCount + emailSuccessCount) > 1 ? 's' : ''}';
        Fluttertoast.showToast(
          msg: 'Message sent to $successMsg',
          backgroundColor: Colors.green,
        );
      }

      if (smsFailCount > 0 || emailFailCount > 0) {
        String failMsg = '';
        if (smsFailCount > 0) failMsg += 'SMS: $smsFailCount ';
        if (emailFailCount > 0) failMsg += 'Email: $emailFailCount ';
        failMsg += 'recipient${(smsFailCount + emailFailCount) > 1 ? 's' : ''}';
        Fluttertoast.showToast(
          msg: 'Failed to send to $failMsg',
          backgroundColor: Colors.red,
        );
      }

      // Clear message after sending
      _messageController.clear();
      setState(() => _selectedContacts.clear());
    } catch (e) {
      Fluttertoast.showToast(
        msg: 'Error sending messages: $e',
        backgroundColor: Colors.red,
      );
    } finally {
      setState(() => _isLoading = false);
    }
  }

  Future<void> _scheduleMessage() async {
    if (_selectedContacts.isEmpty) {
      Fluttertoast.showToast(msg: 'Please select at least one recipient');
      return;
    }

    if (_messageController.text.trim().isEmpty) {
      Fluttertoast.showToast(msg: 'Please enter a message');
      return;
    }

    // Get current user info
    final userInfo = await SessionHelpers.getUserInfo();
    if (userInfo == null) {
      Fluttertoast.showToast(msg: 'User session expired. Please login again.');
      return;
    }

    // Show date picker
    final DateTime? selectedDate = await showDatePicker(
      context: context,
      initialDate: DateTime.now().add(const Duration(days: 1)),
      firstDate: DateTime.now(),
      lastDate: DateTime.now().add(const Duration(days: 365)),
      builder: (context, child) {
        return Theme(
          data: Theme.of(context).copyWith(
            colorScheme: ColorScheme.light(
              primary: ColorHelpers.accentColor,
              onPrimary: Colors.white,
              surface: ColorHelpers.customblack1,
              onSurface: ColorHelpers.secondaryColor,
            ),
          ),
          child: child!,
        );
      },
    );

    if (selectedDate == null) return;

    // Show time picker
    final TimeOfDay? selectedTime = await showTimePicker(
      context: context,
      initialTime: TimeOfDay.now(),
      builder: (context, child) {
        return Theme(
          data: Theme.of(context).copyWith(
            colorScheme: ColorScheme.light(
              primary: ColorHelpers.accentColor,
              onPrimary: Colors.white,
              surface: ColorHelpers.customblack1,
              onSurface: ColorHelpers.secondaryColor,
            ),
          ),
          child: child!,
        );
      },
    );

    if (selectedTime == null) return;

    // Combine date and time
    final scheduledDateTime = DateTime(
      selectedDate.year,
      selectedDate.month,
      selectedDate.day,
      selectedTime.hour,
      selectedTime.minute,
    );

    // Validate that scheduled time is in the future
    if (scheduledDateTime.isBefore(DateTime.now())) {
      Fluttertoast.showToast(
        msg: 'Please select a future date and time',
        backgroundColor: Colors.orange,
      );
      return;
    }

    // Check for existing scheduled messages at the same time
    bool hasConflict = false;
    context.read<ScheduledMessageBloc>().add(CheckScheduleConflictEvent(scheduledTime: scheduledDateTime));

    // Wait for the conflict check result
    await for (final state in context.read<ScheduledMessageBloc>().stream) {
      if (state is ScheduleConflictChecked) {
        hasConflict = state.hasConflict;
        break;
      } else if (state is ScheduledMessageError) {
        Fluttertoast.showToast(
          msg: 'Error checking schedule conflicts',
          backgroundColor: Colors.red,
        );
        return;
      }
    }

    if (hasConflict) {
      Fluttertoast.showToast(
        msg: 'Warning: There is already a scheduled message at this time!',
        backgroundColor: Colors.orange,
      );
      // Continue with scheduling but show warning
    }

    // Create scheduled message
    final scheduledMessage = ScheduledMessage(
      id: '', // Will be generated by the bloc
      senderName: userInfo['fullName'] ?? 'Unknown',
      senderRole: userInfo['role'] ?? 'Unknown',
      message: _messageController.text.trim(),
      recipientPhones: _selectedContacts
          .map((contact) => contact.phoneNumber)
          .toList(),
      recipientEmails: _selectedContacts
          .map((contact) => contact.email)
          .toList(),
      recipientNames: _selectedContacts.map((contact) => contact.name).toList(),
      sendSMS: _sendSMS,
      sendEmail: _sendEmail,
      scheduledTime: scheduledDateTime,
      createdAt: DateTime.now(),
    );

    // Save scheduled message
    context.read<ScheduledMessageBloc>().add(
      AddScheduledMessageEvent(scheduledMessage: scheduledMessage),
    );

    // Clear selections and message
    setState(() => _selectedContacts.clear());
    _messageController.clear();
  }

  @override
  Widget build(BuildContext context) {
    double screenWidth = MediaQuery.of(context).size.width;
    double screenHeight = MediaQuery.of(context).size.height;

    return Scaffold(
      backgroundColor: ColorHelpers.customblack1,
      appBar: AppBar(
        backgroundColor: ColorHelpers.primaryColor,
        leading: Builder(
          builder: (context) => IconButton(
            icon: SvgPicture.asset(
              SvgHelpers.menulist,
              width: 24,
              height: 24,
              colorFilter: ColorFilter.mode(
                ColorHelpers.secondaryColor,
                BlendMode.srcIn,
              ),
            ),
            onPressed: () => Scaffold.of(context).openDrawer(),
          ),
        ),
        title: Align(
          alignment: Alignment.centerRight,
          child: Row(
            mainAxisSize: MainAxisSize.min,
            children: [
              CustomText(
                text: 'BEANS',
                fontFamily: 'Anton',
                fontSize: 30.0,
                color: ColorHelpers.secondaryColor,
                fontWeight: FontWeight.w700,
                textAlign: TextAlign.center,
              ),
              SizedBox(width: screenWidth * 0.02),
              CustomText(
                text: 'ALERT',
                fontFamily: 'Anton',
                fontSize: 30.0,
                color: ColorHelpers.accentColor,
                fontWeight: FontWeight.w400,
                textAlign: TextAlign.center,
              ),
            ],
          ),
        ),
      ),
      drawer: CustomNavigationSideBar(),
      body: BlocBuilder<ContactBloc, ContactState>(
        builder: (context, state) {
          if (state is ContactLoading) {
            return Center(
              child: CircularProgressIndicator(color: ColorHelpers.accentColor),
            );
          }

          if (state is ContactError) {
            return Center(
              child: Column(
                mainAxisAlignment: MainAxisAlignment.center,
                children: [
                  Icon(
                    Icons.error_outline,
                    color: Colors.red,
                    size: screenWidth * 0.15,
                  ),
                  SizedBox(height: screenHeight * 0.02),
                  CustomText(
                    text: 'Error loading contacts',
                    fontFamily: 'Poppins',
                    fontSize: screenWidth * 0.045,
                    color: Colors.red,
                    fontWeight: FontWeight.w500,
                  ),
                  SizedBox(height: screenHeight * 0.01),
                  CustomText(
                    text: state.message,
                    fontFamily: 'Poppins',
                    fontSize: screenWidth * 0.035,
                    color: ColorHelpers.secondaryColor.withOpacity(0.7),
                    fontWeight: FontWeight.w400,
                  ),
                ],
              ),
            );
          }

          if (state is ContactLoaded) {
            final purokContacts = state.purokContacts;

            return SingleChildScrollView(
              padding: EdgeInsets.all(screenWidth * 0.04),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  // Header
                  CustomText(
                    text: 'Send Message',
                    fontFamily: 'Anton',
                    fontSize: screenWidth * 0.06,
                    color: ColorHelpers.secondaryColor,
                    fontWeight: FontWeight.w600,
                    textAlign: TextAlign.left,
                  ),
                  SizedBox(height: screenHeight * 0.02),

                  // Recipients Section
                  Container(
                    padding: EdgeInsets.all(screenWidth * 0.04),
                    decoration: BoxDecoration(
                      color: ColorHelpers.primaryColor.withOpacity(0.1),
                      borderRadius: BorderRadius.circular(screenWidth * 0.03),
                      border: Border.all(
                        color: ColorHelpers.primaryColor.withOpacity(0.3),
                        width: 1,
                      ),
                    ),
                    child: Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        Row(
                          mainAxisAlignment: MainAxisAlignment.spaceBetween,
                          children: [
                            CustomText(
                              text: 'Select Recipients',
                              fontFamily: 'Poppins',
                              fontSize: screenWidth * 0.045,
                              color: ColorHelpers.secondaryColor,
                              fontWeight: FontWeight.w600,
                              textAlign: TextAlign.left,
                            ),
                            Container(
                              padding: EdgeInsets.symmetric(
                                horizontal: screenWidth * 0.03,
                                vertical: screenHeight * 0.005,
                              ),
                              decoration: BoxDecoration(
                                color: ColorHelpers.accentColor,
                                borderRadius: BorderRadius.circular(
                                  screenWidth * 0.02,
                                ),
                              ),
                              child: CustomText(
                                text: '${_selectedContacts.length} selected',
                                fontFamily: 'Poppins',
                                fontSize: screenWidth * 0.035,
                                color: Colors.white,
                                fontWeight: FontWeight.w500,
                                textAlign: TextAlign.center,
                              ),
                            ),
                          ],
                        ),
                        SizedBox(height: screenHeight * 0.015),

                        // Contact List by Purok
                        if (purokContacts.isEmpty)
                          Center(
                            child: Padding(
                              padding: EdgeInsets.all(screenHeight * 0.04),
                              child: CustomText(
                                text: 'No contacts available',
                                fontFamily: 'Poppins',
                                fontSize: screenWidth * 0.04,
                                color: ColorHelpers.secondaryColor.withOpacity(
                                  0.6,
                                ),
                                fontWeight: FontWeight.w400,
                              ),
                            ),
                          )
                        else
                          ...purokContacts.entries.map((entry) {
                            final purokName = entry.key;
                            final contacts = entry.value;

                            return Column(
                              crossAxisAlignment: CrossAxisAlignment.start,
                              children: [
                                CustomText(
                                  text: 'Purok $purokName',
                                  fontFamily: 'Poppins',
                                  fontSize: screenWidth * 0.04,
                                  color: ColorHelpers.accentColor,
                                  fontWeight: FontWeight.w600,
                                ),
                                SizedBox(height: screenHeight * 0.01),
                                ...contacts.map(
                                  (contact) => SelectableContactCard(
                                    contact: contact,
                                    isSelected: _selectedContacts.contains(
                                      contact,
                                    ),
                                    onTap: () =>
                                        _toggleContactSelection(contact),
                                  ),
                                ),
                                SizedBox(height: screenHeight * 0.02),
                              ],
                            );
                          }),
                      ],
                    ),
                  ),

                  SizedBox(height: screenHeight * 0.03),

                  // Sender Name Field
                  CustomText(
                    text: 'Sender Name',
                    fontFamily: 'Poppins',
                    fontSize: screenWidth * 0.04,
                    color: ColorHelpers.secondaryColor,
                    fontWeight: FontWeight.w500,
                  ),
                  SizedBox(height: screenHeight * 0.01),
                  CustomTextField(
                    controller: _senderNameController,
                    hintText: 'Sender name (optional)',
                    borderColor: ColorHelpers.primaryColor,
                    fillColor: ColorHelpers.customblack1,
                    prefixIcon: FontAwesomeIcons.user,
                    iconColor: ColorHelpers.accentColor,
                  ),

                  SizedBox(height: screenHeight * 0.02),

                  // Message Field
                  CustomText(
                    text: 'Message',
                    fontFamily: 'Poppins',
                    fontSize: screenWidth * 0.04,
                    color: ColorHelpers.secondaryColor,
                    fontWeight: FontWeight.w500,
                  ),
                  SizedBox(height: screenHeight * 0.01),
                  Container(
                    decoration: BoxDecoration(
                      boxShadow: [
                        BoxShadow(
                          color: Colors.grey.withOpacity(0.3),
                          spreadRadius: screenWidth * 0.005,
                          blurRadius: screenWidth * 0.01,
                          offset: Offset(
                            screenWidth * 0.005,
                            screenHeight * 0.0025,
                          ),
                        ),
                      ],
                      borderRadius: BorderRadius.circular(screenWidth * 0.03),
                    ),
                    child: TextField(
                      controller: _messageController,
                      maxLines: 5,
                      style: TextStyle(
                        fontFamily: 'Poppins',
                        color: ColorHelpers.secondaryColor,
                        fontSize: screenWidth * 0.04,
                        fontWeight: FontWeight.w400,
                      ),
                      decoration: InputDecoration(
                        hintText: 'Enter your message...',
                        filled: true,
                        hintStyle: TextStyle(
                          fontFamily: 'Poppins',
                          color: ColorHelpers.secondaryColor.withOpacity(0.6),
                          fontSize: screenWidth * 0.04,
                          fontWeight: FontWeight.w400,
                        ),
                        fillColor: ColorHelpers.customblack1,
                        contentPadding: EdgeInsets.all(screenWidth * 0.04),
                        enabledBorder: OutlineInputBorder(
                          borderRadius: BorderRadius.circular(
                            screenWidth * 0.03,
                          ),
                          borderSide: BorderSide(
                            color: ColorHelpers.primaryColor,
                            width: screenWidth * 0.0075,
                          ),
                        ),
                        focusedBorder: OutlineInputBorder(
                          borderRadius: BorderRadius.circular(
                            screenWidth * 0.03,
                          ),
                          borderSide: BorderSide(
                            color: ColorHelpers.primaryColor,
                            width: screenWidth * 0.005,
                          ),
                        ),
                      ),
                    ),
                  ),

                  SizedBox(height: screenHeight * 0.03),

                  // Service Selection
                  Container(
                    padding: EdgeInsets.all(screenWidth * 0.04),
                    decoration: BoxDecoration(
                      color: ColorHelpers.primaryColor.withOpacity(0.1),
                      borderRadius: BorderRadius.circular(screenWidth * 0.03),
                      border: Border.all(
                        color: ColorHelpers.primaryColor.withOpacity(0.3),
                        width: 1,
                      ),
                    ),
                    child: Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        CustomText(
                          text: 'Select Services',
                          fontFamily: 'Poppins',
                          fontSize: screenWidth * 0.045,
                          color: ColorHelpers.secondaryColor,
                          fontWeight: FontWeight.w600,
                        ),
                        SizedBox(height: screenHeight * 0.015),
                        Row(
                          children: [
                            Expanded(
                              child: CheckboxListTile(
                                title: Row(
                                  children: [
                                    FaIcon(
                                      FontAwesomeIcons.sms,
                                      color: ColorHelpers.accentColor,
                                      size: screenWidth * 0.045,
                                    ),
                                    SizedBox(width: screenWidth * 0.02),
                                    CustomText(
                                      text: 'SMS',
                                      fontFamily: 'Poppins',
                                      fontSize: screenWidth * 0.04,
                                      color: ColorHelpers.secondaryColor,
                                      fontWeight: FontWeight.w500,
                                    ),
                                  ],
                                ),
                                value: _sendSMS,
                                onChanged: (value) => setState(() => _sendSMS = value ?? true),
                                activeColor: ColorHelpers.accentColor,
                                checkColor: Colors.white,
                              ),
                            ),
                            Expanded(
                              child: CheckboxListTile(
                                title: Row(
                                  children: [
                                    FaIcon(
                                      FontAwesomeIcons.envelope,
                                      color: ColorHelpers.accentColor,
                                      size: screenWidth * 0.045,
                                    ),
                                    SizedBox(width: screenWidth * 0.02),
                                    CustomText(
                                      text: 'Email',
                                      fontFamily: 'Poppins',
                                      fontSize: screenWidth * 0.04,
                                      color: ColorHelpers.secondaryColor,
                                      fontWeight: FontWeight.w500,
                                    ),
                                  ],
                                ),
                                value: _sendEmail,
                                onChanged: (value) => setState(() => _sendEmail = value ?? true),
                                activeColor: ColorHelpers.accentColor,
                                checkColor: Colors.white,
                              ),
                            ),
                          ],
                        ),
                      ],
                    ),
                  ),

                  SizedBox(height: screenHeight * 0.04),

                  // Action Buttons
                  Row(
                    children: [
                      Expanded(
                        child: CustomButton(
                          hintText: _isLoading ? 'Sending...' : 'Send Now',
                          fontFamily: 'Anton',
                          fontSize: screenWidth * 0.045,
                          fontWeight: FontWeight.w600,
                          onPressed: _isLoading ? () {} : () => _sendMessage(),
                          width: double.infinity,
                          height: screenHeight * 0.06,
                        ),
                      ),
                      SizedBox(width: screenWidth * 0.04),
                      Expanded(
                        child: ElevatedButton(
                          onPressed: _scheduleMessage,
                          style: ElevatedButton.styleFrom(
                            backgroundColor: ColorHelpers.secondaryColor,
                            shape: RoundedRectangleBorder(
                              borderRadius: BorderRadius.circular(30.0),
                            ),
                            padding: EdgeInsets.symmetric(
                              vertical: screenHeight * 0.015,
                            ),
                          ),
                          child: Row(
                            mainAxisAlignment: MainAxisAlignment.center,
                            children: [
                              FaIcon(
                                FontAwesomeIcons.calendar,
                                color: ColorHelpers.primaryColor,
                                size: screenWidth * 0.045,
                              ),
                              SizedBox(width: screenWidth * 0.02),
                              CustomText(
                                text: 'Schedule',
                                fontFamily: 'Anton',
                                fontSize: screenWidth * 0.04,
                                color: ColorHelpers.primaryColor,
                                fontWeight: FontWeight.w600,
                              ),
                            ],
                          ),
                        ),
                      ),
                    ],
                  ),
                ],
              ),
            );
          }

          return Center(
            child: CustomText(
              text: 'No contacts loaded',
              fontFamily: 'Poppins',
              fontSize: screenWidth * 0.045,
              color: ColorHelpers.secondaryColor.withOpacity(0.6),
              fontWeight: FontWeight.w400,
            ),
          );
        },
      ),
    );
  }
}
